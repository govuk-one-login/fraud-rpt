AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Application for mocking inbound messages from relying parties.

Parameters:
  Environment:
    Description: Name of Environment to deploy to
    Type: String
    Default: build
    AllowedValues:
      - development
      - build
      - staging
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"
  PermissionsBoundary:
    Type: String
    Description: >
      The ARN of the permissions boundary to apply to any role created by the template
    Default: "none"
  BranchName:
    Type: String
    Description: "Name of the branch to be deployed"
    Default: "main"

Conditions:
  UseCodeSigning: !Not [!Equals [!Ref CodeSigningConfigArn, "none"]]
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, "none"]]
  onMainBranch: !Equals [!Ref "BranchName", "main"]
  IsDevOrBuildEnv: !Or
    - !Equals [!Ref Environment, "development"]
    - !Equals [!Ref Environment, "build"]
  BuildPairwiseResources: !And
    - Condition: onMainBranch
    - Condition: IsDevOrBuildEnv

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: nodejs18.x
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    Timeout: 10
    Environment:
      Variables:
        TRANSMITTER_QUEUE_URL: !Ref SETTransmitterQueue
        LOG_LEVEL: INFO
        POWERTOOLS_SERVICE_NAME: InboundSSF-mock-rp
        POWERTOOLS_METRICS_NAMESPACE: !Sub ${Environment}-InboundSSF-mock-rp

Mappings:
  ##############################################################
  # JWS Signing
  ##############################################################
  JWSSignRoleARNs:
    Environment:
      development: "##TO QUESTION##"
      build: "##TO QUESTION##"
      staging: "##TO QUESTION##"

  JWSSignKMSARNs:
    Environment:
      development: "##TO QUESTION##"
      build: "##TO QUESTION##"
      staging: "##TO QUESTION##"

  ##############################################################
  # JWE Encryption (to be removed once JWE.encryptCEK uses outbound GetPublicKey endpoint)
  ##############################################################
  JWEGetPublicKeyRoleARNs:
    Environment:
      development: "##TO QUESTION##"
      build: "##TO QUESTION##"
      staging: "##TO QUESTION##"

  JWEGetPublicKeyKMSARNs:
    Environment:
      development: "##TO QUESTION##"
      build: "##TO QUESTION##"
      staging: "##TO QUESTION##"

Resources:
  ##############################################################
  # Activation API Gateway
  ##############################################################
  ServiceActivationApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${Environment}-${AWS::StackName}-service-activation-gateway
      Description: API Gateway to start Mock RP Service
      StageName: !Ref Environment
      TracingEnabled: true
      CacheClusterEnabled: true
      CacheClusterSize: "0.5"
      AccessLogSetting:
        DestinationArn: !GetAtt ServiceActivationApiLogs.Arn
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency}'

  ServiceActivationApiLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogKeyStore.Arn
      RetentionInDays: 30

  ##############################################################
  # SET Generator Lambda
  ##############################################################
  GeneratorLambda:
    #checkov:skip=CKV_AWS_116: Lambda level DLQs not supported with SQS / Api Gateway Triggers. DLQs at Queue level instead
    #checkov:skip=CKV_AWS_117: VPC does not need to be configured currently for mock rp, TBC
    #checkov:skip=CKV_AWS_173: Environment Variable not Sensitive
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Environment:
        Variables:
          LAMBDA_NAME: GeneratorLambda
          ENVIRONMENT: !Sub ${Environment}
      Architectures:
        - arm64
      FunctionName: !Sub ${Environment}-${AWS::StackName}-set-generator
      Description: Parses configurations from endpoint. Generates messages and sends in batches to Transmitter Lambda.
      CodeUri: src/lambdas/GeneratorLambda
      Handler: handler.handler
      MemorySize: 128
      ReservedConcurrentExecutions: 10
      Events:
        ActivationApi:
          Type: Api
          Properties:
            RestApiId: !Ref ServiceActivationApiGateway
            Path: / #TBC
            Method: POST
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SETTransmitterQueue.QueueName
        - KMSEncryptPolicy:
            KeyId: !Ref QueueKeyStore
        - KMSDecryptPolicy:
            KeyId: !Ref QueueKeyStore
        - SSMParameterWithSlashPrefixReadPolicy:
            ParameterName: !Sub "/${Environment}/ssf/SSFUserPoolClientId"
        - SSMParameterWithSlashPrefixReadPolicy:
            ParameterName: !Sub "/${Environment}/ssf/SSFUserPoolId"
        - Statement:
            Sid: allowDescribeUserPool
            Effect: Allow
            Action:
              - cognito-idp:DescribeUserPoolClient
            Resource: "*"
        - Statement:
            Sid: queueKeyPermissions
            Effect: Allow
            Action:
              - kms:GenerateDataKey
            Resource: !GetAtt QueueKeyStore.Arn

    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        EntryPoints:
          - handler.ts

  SETGeneratorLambdaLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GeneratorLambda}"
      KmsKeyId: !GetAtt LogKeyStore.Arn
      RetentionInDays: 30

  ##############################################################
  # SET Transmitter Queue
  ##############################################################
  SETTransmitterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref QueueKeyStore
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SETTransmitterDeadLetterQueue.Arn
        maxReceiveCount: 5

  ##############################################################
  # SET Transmitter Dead Letter Queue
  ##############################################################
  SETTransmitterDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref QueueKeyStore

  ##############################################################
  # SET Transmitter Lambda
  ##############################################################
  TransmitterLambda:
    #checkov:skip=CKV_AWS_116: Lambda level DLQs not supported with SQS / Api Gateway Triggers. DLQs at Queue level instead
    #checkov:skip=CKV_AWS_117: VPC does not need to be configured currently for mock rp, TBC
    #checkov:skip=CKV_AWS_173: Environment Variable not Sensitive
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Environment:
        Variables:
          LAMBDA_NAME: TransmitterLambda
          JWS_SIGN_ARN:
            !FindInMap [JWSSignKMSARNs, Environment, !Ref Environment]
          JWE_PUBLIC_KEY_ARN:
            !FindInMap [JWEGetPublicKeyKMSARNs, Environment, !Ref Environment]
          ENVIRONMENT: !Sub ${Environment}
      Architectures:
        - arm64
      FunctionName: !Sub ${Environment}-${AWS::StackName}-set-transmitter
      Description: Recieves messages from Generator Lambda via SQS. Creates and handles POST requests to SSF Endpoint.
      CodeUri: src/lambdas/TransmitterLambda
      Handler: handler.handler
      ReservedConcurrentExecutions: 10
      Events:
        ValidatorQueueEvent:
          Type: SQS
          Properties:
            Enabled: true
            FunctionResponseTypes:
              - ReportBatchItemFailures
            Queue: !GetAtt SETTransmitterQueue.Arn
            BatchSize: 10
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SETTransmitterQueue.QueueName
        - KMSEncryptPolicy:
            KeyId: !Ref QueueKeyStore
        - KMSDecryptPolicy:
            KeyId: !Ref QueueKeyStore
        - Statement:
            Sid: queueKeyPermissions
            Effect: Allow
            Action:
              - kms:GenerateDataKey
            Resource: !GetAtt QueueKeyStore.Arn
        - Statement:
            Sid: KMSSignPermissions
            Effect: Allow
            Action:
              - kms:Sign
            Resource: !FindInMap [JWSSignKMSARNs, Environment, !Ref Environment]
        - Statement:
            Sid: KMSGetPublicKeyPermissions
            Effect: Allow
            Action:
              - kms:GetPublicKey
            Resource:
              !FindInMap [JWEGetPublicKeyKMSARNs, Environment, !Ref Environment]
        - Statement:
            Sid: assumeKMSSignRole
            Effect: Allow
            Action:
              - sts:AssumeRole
            Resource:
              !FindInMap [JWSSignRoleARNs, Environment, !Ref Environment]
        - Statement:
            Sid: assumeKMSGetPublicKeyRole
            Effect: Allow
            Action:
              - sts:AssumeRole
            Resource:
              !FindInMap [
                JWEGetPublicKeyRoleARNs,
                Environment,
                !Ref Environment,
              ]
        - SSMParameterWithSlashPrefixReadPolicy:
            ParameterName: !Sub "/${Environment}/ssf/SSFUserPoolClientId"
        - SSMParameterWithSlashPrefixReadPolicy:
            ParameterName: !Sub "/${Environment}/ssf/SSFUserPoolId"
        - Statement:
            Sid: allowDescribeUserPool
            Effect: Allow
            Action:
              - cognito-idp:DescribeUserPoolClient
            Resource: "*"
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        EntryPoints:
          - handler.ts

  SETTransmitterLambdaLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${TransmitterLambda}"
      KmsKeyId: !GetAtt LogKeyStore.Arn
      RetentionInDays: 30

  ##############################################################
  # Encryption Keys
  ##############################################################
  QueueKeyStore:
    Type: AWS::KMS::Key
    Properties:
      Description: Encryption key for Queues
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"

  LogKeyStore:
    Type: AWS::KMS::Key
    Properties:
      Description: Encryption key for Logs
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action: "kms:*"
            Resource: "*"

  ##############################################################
  # EventBridgeRule
  ##############################################################
  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Mock RP EventBridge Rule
      ScheduleExpression: rate(5 minutes)
      EventPattern:
        source:
          - "mock-rp-service"
        detail-type:
          - "Mock RP Service Trigger"
        detail:
          numMessages:
            - 1
          rpSplit:
            - 1
            - 0
            - 0
          eventTypeSplit:
            accountPurged: [{ "numeric": ["=", 1] }]
            accountCredentialChangeRequired: [{ "numeric": ["=", 1] }]
            accountDisabled: [{ "numeric": ["=", 1] }]
            accountEnabled: [{ "numeric": ["=", 1] }]
            credentialCompromise: [{ "numeric": ["=", 1] }]
            optIn: [{ "numeric": ["=", 1] }]
            optOutInitiated: [{ "numeric": ["=", 1] }]
            optOutCancelled: [{ "numeric": ["=", 1] }]
            optOutEffective: [{ "numeric": ["=", 1] }]
            recoveryActivated: [{ "numeric": ["=", 1] }]
            recoveryInformationChanged: [{ "numeric": ["=", 1] }]
            sessionsRevoked: [{ "numeric": ["=", 1] }]
          errorRate:
            - 0.1
      Name: mock-rp-service-trigger
      State: "ENABLED"
      Targets:
        - Arn:
            !Join [
              "",
              [
                "arn:aws:execute-api:",
                !Ref AWS::Region,
                ":",
                !Ref AWS::AccountId,
                ":",
                !Ref ServiceActivationApiGateway,
                "/",
                !Ref Environment,
                "/POST/",
              ],
            ]
          Id: "ServiceActivationApiGateway"
    Condition: onMainBranch

  ##############################################################
  # Replica TxMA Pairwise Table
  # Mock Table used for Dev and Build
  ##############################################################
  PairwiseTableKeyStore:
    Type: AWS::KMS::Key
    Condition: BuildPairwiseResources
    Properties:
      Description: Encryption key for DynamoDB Pairwise Table
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"

  PairwiseMappingTable:
    Type: AWS::DynamoDB::Table
    Condition: BuildPairwiseResources
    Properties:
      TableName: pairwise-mapping-table
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: commonSubjectId
          AttributeType: S
        - AttributeName: clientId
          AttributeType: S
        - AttributeName: clientPairwiseIdLookup
          AttributeType: S
      KeySchema:
        - AttributeName: commonSubjectId
          KeyType: HASH
        - AttributeName: clientId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ClientPairwiseIdIndex
          KeySchema:
            - AttributeName: clientPairwiseIdLookup
              KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref PairwiseTableKeyStore

  ##############################################################
  # Ingestion Lambda IAM Role
  ##############################################################
  IngestionLambdaRole:
    #checkov:skip=CKV_AWS_111: Write access needed to dynamic logs resource
    Type: AWS::IAM::Role
    Condition: BuildPairwiseResources
    Properties:
      RoleName: !Sub ${AWS::StackName}-ingestion-lambda-role
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !GetAtt PairwiseMappingTable.Arn
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - kms:*
                Resource: !GetAtt PairwiseTableKeyStore.Arn

  ##############################################################
  # Ingestion Lambda
  ##############################################################
  IngestionLambda:
    #checkov:skip=CKV_AWS_116: Lambda level DLQs not supported with SQS / Api Gateway Triggers. DLQs at Queue level instead
    #checkov:skip=CKV_AWS_117: VPC does not need to be configured currently for mock rp, TBC
    #checkov:skip=CKV_AWS_173: Environment Variable not Sensitive
    Type: AWS::Serverless::Function
    Condition: BuildPairwiseResources
    Properties:
      Description: When ran on the main branch of an environment, this lambda is ran to populate the dynamoDB table acting as the pairwiseID lookup table for the mock.
      CodeUri: src/lambdas/MockPairwiseIngestionLambda
      Handler: handler.handler
      ReservedConcurrentExecutions: 10
      Runtime: nodejs18.x
      Role: !GetAtt IngestionLambdaRole.Arn
      Timeout: 60
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        EntryPoints:
          - handler.ts

  IngestionLambdaLogs:
    Type: AWS::Logs::LogGroup
    Condition: BuildPairwiseResources
    Properties:
      LogGroupName: !Sub "/aws/lambda/${IngestionLambda}"
      KmsKeyId: !GetAtt LogKeyStore.Arn
      RetentionInDays: 30

  ##############################################################
  # DynamoDB Actions
  ##############################################################
  InitializeDynamoDB:
    Type: Custom::IngestionLambda
    Condition: BuildPairwiseResources
    Properties:
      ServiceToken: !GetAtt IngestionLambda.Arn
      DynamoTableName:
        Ref: PairwiseMappingTable

  InboundSsfPairwiseTableRole:
    Type: AWS::IAM::Role
    Condition: BuildPairwiseResources
    Properties:
      RoleName: !Sub ${AWS::StackName}-pairwise-table-role
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !GetAtt PairwiseMappingTable.Arn
                  - !Sub "${PairwiseMappingTable.Arn}/index/*"
              - Effect: Allow
                Action:
                  - kms:*
                Resource: !GetAtt PairwiseTableKeyStore.Arn

  ##############################################################
  # PublicKey Lambda
  ##############################################################
  PublicKeyLambda:
    #checkov:skip=CKV_AWS_116: Lambda level DLQs not supported with SQS / Api Gateway Triggers. DLQs at Queue level instead
    #checkov:skip=CKV_AWS_117: VPC does not need to be configured currently for mock rp, TBC
    #checkov:skip=CKV_AWS_173: Environment Variable not Sensitive
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Environment:
        Variables:
          LAMBDA_NAME: PublicKeyLambda
          ENVIRONMENT: !Ref Environment
      Architectures:
        - arm64
      FunctionName: !Sub ${Environment}-${AWS::StackName}-public-key
      Description: Simulates an RP endpoint for serving their public key. Triggered by API Gateway requests. Fetches mock public key from AWS KMS for SET verification.
      CodeUri: src/lambdas/PublicKeyLambda
      Handler: handler.handler
      MemorySize: 128
      Role: !GetAtt PublicKeyLambdaExecutionRole.Arn
      ReservedConcurrentExecutions: 10
      Events:
        ActivationApi:
          Type: Api
          Properties:
            RestApiId: !Ref ServiceActivationApiGateway
            Path: /getPublicKey
            Method: GET
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        EntryPoints:
          - handler.ts

  PublicKeyLambdaLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PublicKeyLambda}"
      KmsKeyId: !GetAtt LogKeyStore.Arn
      RetentionInDays: 30

  ##############################################################
  # PublicKeyLambda IAM Role
  ##############################################################
  PublicKeyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-pk-execution-role
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  ##############################################################
  # IAM Policy for PublicKeyLambda to access SSM Parameter
  ##############################################################
  GetPublicKeyParameterPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GetPublicKeyParameterPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "ssm:GetParameter"
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Environment}/PublicKeyArn"
      Roles:
        - !Ref PublicKeyLambdaExecutionRole

  GetPublicKMSKeyPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GetPublicKMSKeyPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "kms:GetPublicKey"
            Resource: "*"
      Roles:
        - !Ref PublicKeyLambdaExecutionRole
